#pragma once

#include <cmath>
#include <numbers>
#include <stdexcept>
#include <vector>

namespace kynema::math {

inline std::vector<double> GetGlLocations(size_t order) {
    switch (order) {
        case 1UL:
            return std::vector{0.};
        case 2UL:
            return std::vector{-std::numbers::inv_sqrt3, std::numbers::inv_sqrt3};
        case 3UL:
            return std::vector{-std::sqrt(3. / 5.), 0., std::sqrt(3. / 5.)};
        case 4UL:
            return std::vector{
                -std::sqrt((3. / 7.) + (2. / 7.) * std::sqrt(6. / 5.)),
                -std::sqrt((3. / 7.) - (2. / 7.) * std::sqrt(6. / 5.)),
                std::sqrt((3. / 7.) - (2. / 7.) * std::sqrt(6. / 5.)),
                std::sqrt((3. / 7.) + (2. / 7.) * std::sqrt(6. / 5.))
            };
        case 5UL:
            return std::vector{
                -(1. / 3.) * std::sqrt(5. + 2. * std::sqrt(10. / 7.)),
                -(1. / 3.) * std::sqrt(5. - 2. * std::sqrt(10. / 7.)), 0.,
                (1. / 3.) * std::sqrt(5. - 2. * std::sqrt(10. / 7.)),
                (1. / 3.) * std::sqrt(5. + 2. * std::sqrt(10. / 7.))
            };
        case 6UL:
            return std::vector{-0.9324695142031520501, -0.6612093864662644815,
                               -0.2386191860831969325, 0.2386191860831969325,
                               0.6612093864662644815,  0.9324695142031520501};
        case 7UL:
            return std::vector{-0.9491079123427585, -0.7415311855993945, -0.4058451513773972, 0.,
                               0.4058451513773972,  0.7415311855993945,  0.9491079123427585};
        case 8UL:
            return std::vector{-0.9602898564975362872, -0.796666477413626728, -0.5255324099163289908,
                               -0.1834346424956497801, 0.1834346424956497801, 0.5255324099163289908,
                               0.796666477413626728,   0.9602898564975362872};
        case 9UL:
            return std::vector{-0.9681602395076261,
                               -0.8360311073266358,
                               -0.6133714327005904,
                               -0.3242534234038089,
                               0.,
                               0.3242534234038089,
                               0.6133714327005904,
                               0.8360311073266358,
                               0.9681602395076261};
        case 10UL:
            return std::vector{
                -0.973906528517172,  -0.8650633666889761, -0.6794095682990245,  // NOLINT
                -0.4333953941292472, -0.1488743389816312, 0.1488743389816312,   // NOLINT
                0.4333953941292472,  0.6794095682990245,  0.8650633666889761,   // NOLINT
                0.973906528517172                                               // NOLINT
            };
        case 11UL:
            return std::vector{-0.9782286581460570, -0.8870625997680953, -0.7301520055740494,
                               -0.5190961292068118, -0.2695431559523449, 0.,
                               0.2695431559523449,  0.5190961292068118,  0.7301520055740494,
                               0.8870625997680953,  0.9782286581460570};
        case 12UL:
            return std::vector{-0.9815606342467192436, -0.9041172563704749088,
                               -0.7699026741943046925, -0.5873179542866174829,
                               -0.3678314989981801841, -0.1252334085114689133,
                               0.1252334085114689133,  0.3678314989981801841,
                               0.5873179542866174829,  0.7699026741943046925,
                               0.9041172563704749088,  0.9815606342467192436};
        case 13UL:
            return std::vector{
                -0.9841830547185881,
                -0.9175983992229779,
                -0.8015780907333099,
                -0.6423493394403402,
                -0.4484927510364469,
                -0.2304583159551348,
                0.,
                0.2304583159551348,
                0.4484927510364469,
                0.6423493394403402,
                0.8015780907333099,
                0.9175983992229779,
                0.9841830547185881
            };
        case 14UL:
            return std::vector{-0.9862838086968123141, -0.928434883663573518,
                               -0.8272013150697650197, -0.6872929048116854789,  // NOLINT
                               -0.5152486363581540996, -0.3191123689278897446,  // NOLINT
                               -0.1080549487073436538, 0.1080549487073436538,   // NOLINT
                               0.3191123689278897446,  0.5152486363581540996,   // NOLINT
                               0.6872929048116854789,  0.8272013150697650197,
                               0.928434883663573518,   0.9862838086968123141};
        case 15UL:
            return std::vector{
                -0.9879925180204854, -0.9372733924007059, -0.8482065834104272, -0.7244177313601700,
                -0.5709721726085388, -0.3941513470775634, -0.2011940939974345, 0.,
                0.2011940939974345,  0.3941513470775634,  0.5709721726085388,  0.7244177313601700,
                0.8482065834104272,  0.9372733924007059,  0.9879925180204854
            };
        default:
            throw std::runtime_error("Supported orders are 1 - 15");
    }
}

inline std::vector<double> GetGlWeights(size_t order) {
    switch (order) {
        case 1UL:
            return std::vector{2.};
        case 2UL:
            return std::vector{1., 1.};
        case 3UL:
            return std::vector{5. / 9., 8. / 9., 5. / 9.};
        case 4UL:
            return std::vector{
                (18. - std::sqrt(30.)) / 36., (18. + std::sqrt(30.)) / 36.,
                (18. + std::sqrt(30.)) / 36., (18. - std::sqrt(30.)) / 36.
            };
        case 5UL:
            return std::vector{
                (322. - 13. * std::sqrt(70.)) / 900., (322. + 13. * std::sqrt(70.)) / 900.,
                128. / 225., (322. + 13. * std::sqrt(70.)) / 900.,
                (322. - 13. * std::sqrt(70.)) / 900.
            };
        case 6UL:
            return std::vector{0.1713244923791703844, 0.3607615730481385508, 0.4679139345726910371,
                               0.4679139345726910371, 0.3607615730481385508, 0.1713244923791703844};
        case 7UL:
            return std::vector{0.1294849661688697, 0.2797053914892766, 0.3818300505051189,
                               0.4179591836734694, 0.3818300505051189, 0.2797053914892766,
                               0.1294849661688697};
        case 8UL:
            return std::vector{0.1012285362903762309, 0.2223810344533744821, 0.3137066458778872136,
                               0.3626837833783619902, 0.3626837833783619902, 0.3137066458778872136,
                               0.2223810344533744821, 0.1012285362903762309};
        case 9UL:
            return std::vector{0.0812743883615744, 0.1806481606948574, 0.2606106964029354,
                               0.3123470770400029, 0.3302393550012598, 0.3123470770400029,
                               0.2606106964029354, 0.1806481606948574, 0.0812743883615744};
        case 10UL:
            return std::vector{0.06667134430868793, 0.1494513491504942, 0.2190863625159827,
                               0.2692667193099965,  0.2955242247147527, 0.2955242247147527,
                               0.2692667193099965,  0.2190863625159827, 0.1494513491504942,
                               0.06667134430868793};
        case 11UL:
            return std::vector{0.0556685671161737, 0.1255803694649046, 0.1862902109277343,
                               0.2331937645919905, 0.2628045445102467, 0.2729250867779006,
                               0.2628045445102467, 0.2331937645919905, 0.1862902109277343,
                               0.1255803694649046, 0.0556685671161737};
        case 12UL:
            return std::vector{0.04717533638651186939, 0.1069393259953183295,
                               0.1600783285433463876,  0.2031674267230659803,
                               0.2334925365383547224,  0.2491470458134028843,
                               0.2491470458134028843,  0.2334925365383547224,
                               0.2031674267230659803,  0.1600783285433463876,
                               0.1069393259953183295,  0.04717533638651186939};
        case 13UL:
            return std::vector{0.0404840047653159, 0.0921214998377284, 0.1388735102197872,
                               0.1781459807619457, 0.2078160475368885, 0.2262831802628972,
                               0.2325515532308739, 0.2262831802628972, 0.2078160475368885,
                               0.1781459807619457, 0.1388735102197872, 0.0921214998377284,
                               0.0404840047653159};
        case 14UL:
            return std::vector{0.03511946033175197823, 0.08015808715976011078, 0.1215185706879031435,
                               0.1572031671581935464,  0.185538397477937822,   0.2051984637212956875,
                               0.2152638534631578227,  0.2152638534631578227,  0.2051984637212956875,
                               0.185538397477937822,   0.1572031671581935464,  0.1215185706879031435,
                               0.08015808715976011078, 0.03511946033175197823};
        case 15UL:
            return std::vector{0.0307532419961173, 0.0703660474881081, 0.1071592204671719,
                               0.1395706779261543, 0.1662692058169939, 0.1861610000155622,
                               0.1984314853271116, 0.2025782419255613, 0.1984314853271116,
                               0.1861610000155622, 0.1662692058169939, 0.1395706779261543,
                               0.1071592204671719, 0.0703660474881081, 0.0307532419961173};
        default:
            throw std::runtime_error("Supported Orders  are 1 - 15");
    }
}

}  // namespace kynema::math
